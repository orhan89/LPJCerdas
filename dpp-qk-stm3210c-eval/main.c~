/**
  ******************************************************************************
  * @file    src/main.c 
  * @author  Ricky Hariady & Eka Rakhman Priandana
  * @version V0.1
  * @date    12/7/2012
  * @brief   Main program body
  ******************************************************************************
  */ 

/* Includes ------------------------------------------------------------------*/
#include "stm32f10x.h"
#include "qp_port.h"
#include "bsp.h"
#include "lpj.h"
#include <stdio.h>
#include <unistd.h>

/** @addtogroup Lampu_Penerangan_Jalan_Cerdas
  * @{
  */

/* Private typedef -----------------------------------------------------------*/
/* Private define ------------------------------------------------------------*/
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/

#ifdef __GNUC__
/* With GCC/RAISONANCE, small printf (option LD Linker->Libraries->Small printf
   set to 'Yes') calls __io_putchar() */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

/* Private functions ---------------------------------------------------------*/

/**
  * @brief  Main program.
  * @param  None
  * @retval None
  */
int main(void)
{
  /*!< At this stage the microcontroller clock setting is already configured, 
       this is done through SystemInit() function which is called from startup
       file (startup_stm32f10x_xx.s) before to branch to application main.
       To reconfigure the default setting of SystemInit() function, refer to
       system_stm32f10x.c file
     */
  
  /* Add your application code here
     */
    int i;

    BSP_init();

  LPJ_ctor();
  QF_init();

  static QEvent const *LPJ_queueSto[10];
  
  QActive_start(AO_LPJ, 1,
  		LPJ_queueSto, Q_DIM(LPJ_queueSto),
  		(void *)0, 0, (QEvent *)0);
  QF_run();

  while(1){
      for(i=0;i<0xFFFF;i++);
      printf("test\r\n");
  }
    
  return 0;
}

/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART */
  USART_SendData(USART3, (uint8_t) ch);

  /* Loop until the end of transmission */
  while (USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET);

  return ch;
}


/* ssize_t */
/* _write (int fd, const void *buf, size_t count) */
/* { */
/*   size_t i; */
/*   const unsigned char *p = buf; */
/*   for (i = 0; i < count; i++) */
/*     __io_putchar (p[i]); */
/*   return count; */
/* } */

#ifdef  USE_FULL_ASSERT

/**
  * @brief  Reports the name of the source file and the source line number
  *   where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{ 
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

  /* Infinite loop */
  while (1)
  {
  }
}
#endif

/**
  * @}
  */


/******************* (C) COPYRIGHT 2010 STMicroelectronics *****END OF FILE****/
